1 Docker  容器化技术

2 使用Dokcer 创建容器（一个容器对应一个软件）

3 yum 命令 安装和卸载软件的命令
  yum install ..... 
  yum remove .... 
  
4 设置docker开机启动
  sudo systemctl start docker;
  sudo systemctl enable docker;  

5 docker
（1） 从注册中心拉取镜像文件 
 (2)  根据镜像文件创建容器（容器中= Linux + MySQL 软件）  
 (3)  使用容器 生成一个镜像文件
 
 
6 镜像的相关操作命令
查看主机中的所有镜像
docker images 
      
删除镜像 
docker rmi   镜像ID

搜索镜像
docker  search  镜像名

拉取镜像
docker pull  镜像名  


7 容器的相关命令
查看当前正在执行的容器
docker ps 

查看启动过的容器
docker ps -a

创建容器:docker run
docker run -d  -p 8080:8080  --name  mytomcat  tomcat

windows:
http://192.168.8.106:8080/

进入容器:
docker exec -it  mytomcat  /bin/bash

退出容器：
exit

停止容器
docker stop  容器ID

删除容器
docker rm 容器ID


8 docker 网络
查看docker中的网络
docker  network  ls

创建桥接网络
docker  network   create  网络名

删除网络
docker  network  remove 网络名

查看网络
docker  network inspect 网络名  


9 使用docker创建容器
Portainer容器,管理系统中的所有容器。

docker run -d --name portainer --net mynetwork -p 9010:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_volume:/data portainer/portainer-ce

管理页面的地址
windows:
http://192.168.8.106:9010
linux:
http://localhost:9010

设置Poratiner容器开启启动
docker udpate --restart=always  portainer


10 使用Dokcer创建RabbitMQ容器
RabbitMQ 是一个消息队列。     削峰   限流   解耦

docker run -d --name rabbit --net mynetwork -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management

设置RabbitMQ容器开机启动
docker udpate --restart=always  rabbit

管理页面:
windows
http://192.168.8.106:15672/


11 防火墙  
systemctl  status  firewalld
systemctl  start   firewalld
systemctl  stop    firewalld

systemctl  start   firewalld
放行8080到8085端口  才能访问到虚拟机中这些端口
firewall-cmd --permanent --add-port=8080-8085/tcp
firewall-cmd --permanent --add-port=9010/tcp
firewall-cmd --permanent --add-port=15672/tcp
重新加载
firewall-cmd --reload


-------------------------------------------------------
12 MySQL容器

docker pull mysql:5.7

mkdir -p  /mydata/mysql
cd  /mydata/mysql
touch  my.cnf
mkdir  datadir

docker run --privileged=true --name qh_mysql -p 3306:3306 --net mynetwork -v /mydata/mysql/datadir:/var/lib/mysql -v /mydata/mysql/conf.d:/etc/mysql/conf.d -v /mydata/mysql/my.cnf:/etc/mysql/my.cnf -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7
---------------------------------------------------------
13 Redis容器
项目中的缓存   分布式锁

docker pull docker pull redis:5.0.14

cd /root
mkdir www
cd  www
mkdir redis

docker run --name redis -p 6379:6379 --net mynetwork -v /root/www/redis/redis.conf:/usr/local/etc/redis/redis.conf -d redis:5.0.14

---------------------------------------------------
14 MongoDB数据库
项目中 存储一些归档数据

docker run -d --net mynetwork --name mongodb -p 27017:27017 -v /usr/local/mongodb/datadb:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin --privileged=true  mongo:4.0.3


docker exec -it mongodb  /bin/bash 

mongo

exit 

exit
-------------------------------------------------------
15 docker命令有哪些

docker images
docker serarch  镜像名字
docker pull  镜像名字
docker rmi  镜像名字/镜像ID

docker run   ....
docker  exec  -it  .....  /bin/bash 
docker  stop  容器名/容器ID
docker  rm    容器名/容器ID
docker  ps 
docker  ps    -a

docker   network ls 
docker   network create 网络名 
docker   network i nspect 网络名


作业:
docker  build 命令
