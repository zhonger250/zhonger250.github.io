server:
  port: 80

spring:
  application:
    name: KgcOA
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: root
    url: jdbc:mysql://127.0.0.1:3306/kgcoa?useUnicode=true&characterEncoding=utf-8
  servlet:
    multipart:
      max-file-size: 1MB
      max-request-size: 10MB
  # redis
  redis:
    password: abc123456
    port: 6379
    host: 127.0.0.1
  # 缓存
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: true
  activiti:
    #项目启动时校验数据库中是否有activiti的表,如果没有则创建
    database-schema-update: true
    #activiti默认不创建历史表,设置为true使用历史表
    db-history-used: true
    #历史表中记录activiti中所有的细节数据
    history-level: full
    #如果resources/process文件夹下有流程文件,会自动部署
    # check-process-definitions: false
  quartz:
    jdbc:
      # always值为true, 每次启动数据库时, 都会执行quartz的sql脚本(建表).
      initialize-schema: never
    # quartz框架定时使用数据库进行存储
    job-store-type: jdbc

  main:
    #Activiti中默认引入了SpringSecurity 我们项目中自己引入了SpringSecurity的依赖。
    #bean就会出现冲突,解决冲突的方式是设置allow-bean-definition-overriding为true
    allow-bean-definition-overriding: true





# 文件保存的位置
file-save-path: X:/upload/


#mybatis-plus配置
mybatis-plus:
  type-aliases-package: com.example.entity
  configuration:
    auto-mapping-behavior: full
    map-underscore-to-camel-case: true
  mapper-locations: classpath:mapper/*.xml


# 配置项目的日志级别, cn.kgc.springboot01包下的类日志级别是debug级别(debug->info->warn->error)
logging:
  level:
    com.example: debug



#mybatis:
#  mapper-locations: classpath:mapper/*.xml
#  configuration:
#    auto-mapping-behavior: full
#    map-underscore-to-camel-case: true
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#  type-aliases-package: cn.kgc.springboot01.entity